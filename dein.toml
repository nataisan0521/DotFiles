[[plugins]]
repo     = 'Shougo/dein.vim'

[[plugins]]
repo     = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo      = 'Shougo/denite.nvim'
hook_add  = '''
    nmap <silent> <C-u><C-t> :<C-u>Denite filetype<CR>
    nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
    nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
    nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
    nmap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
    nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
    nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
    nmap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
    nmap <silent> <C-u>; :<C-u>Denite -resume -immediately -select=+1<CR>
    nmap <silent> <C-u>- :<C-u>Denite -resume -immediately -select=-1<CR>
    nmap <silent> <C-u><C-d> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.dotfiles']}])<CR>
'''

[[plugins]]
repo      = 'Shougo/unite.vim'

[[plugins]]
repo      = 'Shougo/neosnippet-snippets'

[[plugins]]
repo      = 'Shougo/neosnippet'
depends   = ['neosnippet-snippets']
on_i      = 1
hook_source = '''
    let g:deoplete#sources#clang#libcnang_path = '/usr/lib/libclang.so'
    let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
'''

[[plugins]]
repo      = 'tpope/vim-fugitive'

[[plugins]]
repo      = 'tomasr/molokai'


[[plugins]]
repo      = 'altercation/vim-colors-solarized'

[[plugins]]
repo      = 'dracula/vim'

[[plugins]]
repo      = 'itchyny/lightline.vim'


[[plugins]]
repo      = 'glidenote/memolist.vim'
depend    = ['unite.vim']
hook_add  = '''
    nmap <Leader>mn  :MemoNew<CR>
    nmap <Leader>ml :<C-u>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>
''' 

[[plugins]]
repo      = 'Shougo/neomru.vim'
depends   = ['unite.vim']

[[plugins]]
repo      = 'Shougo/neoyank.vim'

[[plugins]]
repo      = 'Shougo/unite-outline'
depends   = ['unite.vim']
hook_add  = '''
    nmap <silent> <C-u><C-o> :<C-u>Denite unite:outline<CR>
'''

[[plugins]]
repo      = 'basyura/unite-rails'
depends   = ['unite.vim']
on_ft     = ['rb','erb']
hook_source = '''
    nmap <silent> <Leader>Rm :<C-u>Denite unite:rails/model<CR>
    nmap <silent> <Leader>Rv :<C-u>Denite<Space>rails/view<CR>
    nmap <silent> <Leader>Rc :<C-u>Denite<Space>rails/controller<CR>
    nmap <silent> <Leader>RC :<C-u>Denite<Space>rails/config<CR>
'''

[[plugins]]
repo      = 'tpope/vim-dispatch'

# インサートモードに入ったら読み込む

[[plugins]] # 補完
repo      = 'Shougo/deoplete.nvim'
if        = 'has("nvim")'
on_i      = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
    if !exists('g:deoplete#keyword_patterns')
      let g:deoplete#keyword_patterns = {}
    endif
    let g:deoplete#keyword_patterns._ = '\h\w*'
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : 
        \ neosnippet#expandable_or_jumpable() ?
        \   "<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo      = 'mattn/emmet-vim'
on_ft     = ['html','css']
on_i      = 1
hook_source = '''
    let g:user_emmet_mode  =  'i'
    let g:use_emmet_complete_tag  =  1
    let g:user_emmet_settings  =  {
    \   'variables': {
    \     'lang': "ja"
    \   }, 
    \   'indentation': '    '
    \ }
'''

[[plugins]]
repo      = 'othree/html5.vim'
on_ft     = ['html']

[[plugins]]
repo      = 'hail2u/vim-css3-syntax'
on_ft     = ['css']

[[plugins]]
repo      = 'jelera/vim-javascript-syntax'
on_ft     = ['html','js']

# Haskellの編集時に読み込む
[[plugins]]
repo      = 'ujihisa/neco-ghc'
on_ft     = ['hs']
on_i      = 1

[[plugins]]
repo      = 'kana/vim-filetype-haskell'
on_ft     = ['hs']

[[plugins]]
repo      = 'eagletmt/ghcmod-vim'
on_ft     = ['hs']
on_i      = 1

[[plugins]]
repo      = 'cespare/vim-toml'
on_ft     = ['toml']

[[plugins]]
repo      = 'OmniSharp/omnisharp-vim'
on_ft     = ['cs']
hook_post_update = '''
    if dein#util#_is_windows()
        let omnicmd = 'msbuild server/OmniSharp.sln'
    elseif dein#util#_is_cygwin()
        let omnicmd = 'msbuild server/OmniSharp.sln'
    else 
        let omnicmd = 'xbuild server/OmniSharp.sln'
    endif
    let g:dein#plugin.build = omnicmd
'''
hook_source = '''
    nnoremap gd :OmniSharpGotoDefinition<cr>
    nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    nnoremap <leader>ft :OmniSharpFindType<cr>
    nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    nnoremap <leader>fu :OmniSharpFindUsages<cr>
    nnoremap <leader>fm :OmniSharpFindMembers<cr>
    
    nnoremap <leader>x  :OmniSharpFixIssue<cr>
    nnoremap <leader>fx :OmniSharpFixUsings<cr>
    nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    nnoremap <leader>d  :OmniSharpDocumentation<cr>
    
    nnoremap <C-K> :OmniSharpNavigateUp<cr>
    nnoremap <C-J> :OmniSharpNavigateDown<cr>
    
    nnoremap <leader>rn :OmniSharpRename<cr>
    nnoremap <leader>cf :OmniSharpCodeFormat<cr>
    nnoremap <leader>rl :OmniSharpReloadSolution<cr>
'''

[[plugins]]
repo     = 'https://gitlab.com/mixedCase/deoplete-omnisharp.git'
on_ft    = ['cs']
on_i     = 1
depends  = ['deoplete.nvim', 'omnisharp-vim']

[[plugins]]
repo     = 'zchee/deoplete-clang'
on_ft    = ['c', 'cpp', 'cmake']
on_i     = 1
hook_source = '''
    let g:deoplete#sources#clang#libcnang_path = '/usr/lib/libclang.so'
    let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
'''

[[plugins]]
repo     = 'davidhalter/jedi'
on_ft    = 'py'
on_i     = 1

[[plugins]]
repo     = 'zchee/deoplete-jedi'
on_ft    = 'py'
on_i     = 1

[[plugins]]
repo     = 'cohama/lexima.vim'
on_i     = 1
hook_source = '''
    let g:lexima_no_default_rules = 1
    call lexima#set_default_rules()
    
    function! s:set_lexima(rule)
        call lexima#add_rule(a:rule)
        let ignore_rule = a:rule
        let ignore_rule.syntax = ["String", "Comment"]
        let ignore_rule.input = ignore_rule.char
        call lexima#add_rule(ignore_rule)
    endfunction
    
    
    call s:set_lexima({'at': '\%#',     'char': '[',    'input': '[]<Left>'})
    call s:set_lexima({'at': '\%#]',    'char': '[',    'input': '['})
    call s:set_lexima({'at': '\[\%#\]', 'char': ']',    'input': '<Right>'})
    call s:set_lexima({'at': '\[\%#\]', 'char': '[',    'input': '[]<Left>'})
    call s:set_lexima({'at': '\[\%#\]', 'char': '<BS>', 'input': '<BS><Del>'})
    
    
    for [begin, end] in [['(', ')'], ['{', '}']]
        let bracket = begin.end
        call s:set_lexima({'at': '\%#',     'char': begin, 'input': bracket.'<Left>'})
        call s:set_lexima({'at': '\%#'.end, 'char': begin, 'input': begin})
    
        call s:set_lexima({'at': begin.'\%#'.end, 'char': end,   'input': '<Right>'})
        call s:set_lexima({'at': begin.'\%#'.end, 'char': begin, 'input': bracket.'<Left>'})
        call s:set_lexima({'at': begin.'\%#'.end, 'char': '<BS>', 'input': '<BS><Del>'})
    endfor
'''

